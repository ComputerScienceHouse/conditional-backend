use crate::api::{log_query, log_query_as, open_transaction};
use crate::app::AppState;
use crate::schema::api::*;
use crate::schema::db::CommitteeType;

use actix_web::{
    delete, get, post, put,
    web::{Data, Json, Path},
    HttpResponse, Responder,
};
use log::{log, Level};
use sqlx::{query, query_as, Pool, Postgres, Transaction};

#[utoipa(
    context_path = "/forms",
    responses(
        (status = 200, description = "Submit coop form"),
        (status = 500, description = "Error generated by Query")
    )
)]
#[post("/coop")]
pub async fn submit_coop_form(
    state: Data<AppState>,
    body: Json<CoopSubmission>,
) -> impl Responder {
    log!(Level::Info, "POST /forms/coop");
    match query!(
        "INSERT INTO current_coops (uid, date_created, semester) VALUES ($1, $2, $3)",
        body.uid,
        Utc::now().naive_utc(),
        bosy.semester
    )
    .execute(&state.db)
    .await
    {
        Ok(_) => HttpResponse::Ok(),
        Err(e) => HttpResponse::InternalServerError().body(e.to_string()),
    }
}

#[utoipa(
    context_path = "/forms",
    responses(
        (status = 200, description = "Get all active co-ops"),
        (status = 500, description = "Error generated by Query")
    )
)]
#[get("/coop")]
pub async fn get_all_coops(
    state: Data<AppState>,
) -> impl Responder {
    log!(Level::Info, "GET /forms/coop");

    match query_as(
        Coop,
        "SELECT * FROM current_coops WHERE date_created > $1",
        &state.year_start,
    )
    .fetch_all(&state.db)
    .await
    {
        Ok(coops) => HttpResponse::Ok().json(coops),
        Err(e) => HttpResponse::InternalServerError().body(e.to_string()),
    }
}
