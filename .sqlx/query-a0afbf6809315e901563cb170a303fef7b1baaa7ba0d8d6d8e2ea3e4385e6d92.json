{
  "db_name": "PostgreSQL",
  "query": "\nSELECT batch.id as \"id!\", batch.name AS \"name!\", batch.uid AS \"creator!\", bi.conditions AS \"conditions!\", bi.members AS \"members!\"\nFROM (SELECT cb.bid, cb.conditions, array_agg(DISTINCT concat(cb.mname, ',', cb.uid)) AS members\nFROM (\nSELECT batches.bid\n, array_agg(concat(batches.\"condition\", ' ', batches.comparison, ' ', batches.value)) AS conditions\n, batches.mname, batches.uid, batches.fid\nFROM (SELECT baid.bid, baid.mname, baid.fid, baid.uid, bc.\"condition\", bc.comparison, bc.value,\nCASE\n\tWHEN baid.bu THEN TRUE\n\tWHEN bc.\"condition\" = 'packet' AND bc.comparison = 'greater' THEN evals.packet > bc.value\n\tWHEN bc.\"condition\" = 'packet' AND bc.comparison = 'equal' THEN evals.packet = bc.value\n\tWHEN bc.\"condition\" = 'packet' AND bc.comparison = 'less' THEN evals.packet < bc.value\n\tWHEN bc.\"condition\" = 'seminar' AND bc.comparison = 'greater' THEN evals.ss > bc.value\n\tWHEN bc.\"condition\" = 'seminar' AND bc.comparison = 'equal' THEN evals.ss = bc.value\n\tWHEN bc.\"condition\" = 'seminar' AND bc.comparison = 'less' THEN evals.ss < bc.value\n\tWHEN bc.\"condition\" = 'committee' AND bc.comparison = 'greater' THEN evals.ds > bc.value\n\tWHEN bc.\"condition\" = 'committee' AND bc.comparison = 'equal' THEN evals.ds = bc.value\n\tWHEN bc.\"condition\" = 'committee' AND bc.comparison = 'less' THEN evals.ds < bc.value\n\tWHEN bc.\"condition\" = 'house' AND bc.comparison = 'greater' THEN evals.hm > bc.value\n\tWHEN bc.\"condition\" = 'house' AND bc.comparison = 'equal' THEN evals.hm = bc.value\n\tWHEN bc.\"condition\" = 'house' AND bc.comparison = 'less' THEN evals.hm < bc.value\n\tELSE false\nEND AS cond_passed\nFROM (SELECT baid.bid, baid.mname, baid.fid, baid.uid, bool_or(baid.bu) AS bu\nFROM (SELECT *\nFROM (SELECT fbu.batch_id, evals.name, fbu.fid, NULL AS uid, TRUE AS bu\n\tFROM freshman_batch_users fbu\n\tLEFT JOIN (\n\tSELECT evals._ AS uid, evals.name, evals.fid\n\tFROM (SELECT *\n\tFROM UNNEST($1::varchar[], $2::varchar[], $3::int8[], $4::int8[], $5::int8[], $6::int8[], $7::int4[])) AS evals(\"name\", _, ss, ds, hm, packet, fid)\n\t) evals\n\tON fbu.fid = evals.fid) AS frosh_info\nUNION (\n\tSELECT mbu.batch_id, evals.name, NULL AS fid, mbu.uid, TRUE AS bu\n\tFROM member_batch_users mbu \n\tLEFT JOIN (\n\tSELECT evals._ AS uid, evals.name, evals.fid\n\tFROM (SELECT *\n\tFROM UNNEST($1::varchar[], $2::varchar[], $3::int8[], $4::int8[], $5::int8[], $6::int8[], $7::int4[])) AS evals(\"name\", _, ss, ds, hm, packet, fid)\n\t) evals\n\tON mbu.uid = evals.uid)\nUNION (\n\tSELECT batch.id, evals.name, CASE WHEN evals.fid != 0 THEN evals.fid ELSE NULL END, evals.uid, FALSE AS bu\n\tFROM batch,\n\t\t(SELECT * FROM UNNEST($1::varchar[], $2::varchar[], $3::int8[], $4::int8[], $5::int8[], $6::int8[], $7::int4[])) AS evals(\"name\", uid, ss, ds, hm, packet, fid)\n)) AS baid(bid, mname, fid, uid, bu)\nGROUP BY baid.bid, baid.mname, baid.fid, baid.uid) AS baid\nLEFT JOIN batch_conditions bc ON bc.batch_id=baid.bid\nLEFT JOIN (\n\tSELECT evals.uid, evals.fid, evals.ss, evals.ds, evals.hm, evals.packet\n\tFROM (SELECT *\n\tFROM UNNEST($1::varchar[], $2::varchar[], $3::int8[], $4::int8[], $5::int8[], $6::int8[], $7::int4[])) AS evals(\"name\", uid, ss, ds, hm, packet, fid)\n\t) evals ON evals.uid=baid.uid OR evals.fid=baid.fid\nWHERE NOT EXISTS (SELECT 1 FROM freshman_batch_pulls fbp WHERE fbp.approved AND fbp.fid=baid.fid)\nAND NOT EXISTS (SELECT 1 FROM member_batch_pulls mbp WHERE mbp.approved AND mbp.uid=baid.uid)) AS batches\n--WHERE cond_passed\nGROUP BY batches.bid, batches.mname, batches.uid, batches.fid\nHAVING bool_and(batches.cond_passed)) AS cb\nGROUP BY cb.bid, cb.conditions) AS bi --thats gay\nLEFT JOIN batch ON bi.bid=batch.id\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id!",
        "type_info": "Int4"
      },
      {
        "ordinal": 1,
        "name": "name!",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "creator!",
        "type_info": "Varchar"
      },
      {
        "ordinal": 3,
        "name": "conditions!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 4,
        "name": "members!",
        "type_info": "TextArray"
      }
    ],
    "parameters": {
      "Left": [
        "VarcharArray",
        "VarcharArray",
        "Int8Array",
        "Int8Array",
        "Int8Array",
        "Int8Array",
        "Int4Array"
      ]
    },
    "nullable": [
      false,
      false,
      false,
      true,
      true
    ]
  },
  "hash": "a0afbf6809315e901563cb170a303fef7b1baaa7ba0d8d6d8e2ea3e4385e6d92"
}
